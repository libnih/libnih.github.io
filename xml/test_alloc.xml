<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="nih-test-alloc">
<refmeta>
<refentrytitle role="top_of_page" id="nih-test-alloc.top_of_page">test_alloc</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  NIH Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>test_alloc</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="nih-test-alloc.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>#define             <link linkend="TEST-ALLOC-SIZE:CAPS">TEST_ALLOC_SIZE</link>                     (_ptr,
                                                         _sz)
#define             <link linkend="TEST-ALLOC-PARENT:CAPS">TEST_ALLOC_PARENT</link>                   (_ptr,
                                                         _parent)
#define             <link linkend="TEST-ALLOC-NOT-PARENT:CAPS">TEST_ALLOC_NOT_PARENT</link>               (_ptr,
                                                         _parent)
<link linkend="return"><returnvalue>return</returnvalue></link>              <link linkend="realloc">realloc</link>                             (<parameter><link linkend="ptr"><type>ptr</type></link> Param1</parameter>,
                                                         <parameter><link linkend="size"><type>size</type></link> Param2</parameter>);
#define             <link linkend="TEST-ALLOC-FAIL:CAPS">TEST_ALLOC_FAIL</link>
#define             <link linkend="TEST-ALLOC-SAFE:CAPS">TEST_ALLOC_SAFE</link>
struct              <link linkend="test-free-tag">test_free_tag</link>;
#define             <link linkend="TEST-FREE-TAG:CAPS">TEST_FREE_TAG</link>                       (_ptr)
#define             <link linkend="TEST-FREE:CAPS">TEST_FREE</link>                           (_ptr)
#define             <link linkend="TEST-NOT-FREE:CAPS">TEST_NOT_FREE</link>                       (_ptr)
</synopsis>
</refsynopsisdiv>

<refsect1 id="nih-test-alloc.description" role="desc">
<title role="desc.title">Description</title>

</refsect1>
<refsect1 id="nih-test-alloc.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TEST-ALLOC-SIZE:CAPS" role="macro">
<title>TEST_ALLOC_SIZE()</title>
<indexterm zone="TEST-ALLOC-SIZE:CAPS"><primary>TEST_ALLOC_SIZE</primary></indexterm>
<programlisting>#define             TEST_ALLOC_SIZE(_ptr, _sz)</programlisting>
<para>
Check that the pointer <parameter>_ptr</parameter> was allocated with <link linkend="nih-alloc"><function>nih_alloc()</function></link>, and has
enough space for at least <parameter>_sz</parameter> bytes.
</para><variablelist role="params">
<varlistentry><term><parameter>_ptr</parameter>&#160;:</term>
<listitem><simpara>allocated pointer,</simpara></listitem></varlistentry>
<varlistentry><term><parameter>_sz</parameter>&#160;:</term>
<listitem><simpara>expected size.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TEST-ALLOC-PARENT:CAPS" role="macro">
<title>TEST_ALLOC_PARENT()</title>
<indexterm zone="TEST-ALLOC-PARENT:CAPS"><primary>TEST_ALLOC_PARENT</primary></indexterm>
<programlisting>#define             TEST_ALLOC_PARENT(_ptr, _parent)</programlisting>
<para>
Check that the pointer <parameter>_ptr</parameter> was allocated with <link linkend="nih-alloc"><function>nih_alloc()</function></link> and has
the other block <parameter>_parent</parameter> as a parent.  <parameter>_parent</parameter> may be the special
NULL parent.
</para><variablelist role="params">
<varlistentry><term><parameter>_ptr</parameter>&#160;:</term>
<listitem><simpara>allocated pointer,</simpara></listitem></varlistentry>
<varlistentry><term><parameter>_parent</parameter>&#160;:</term>
<listitem><simpara>expected parent.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TEST-ALLOC-NOT-PARENT:CAPS" role="macro">
<title>TEST_ALLOC_NOT_PARENT()</title>
<indexterm zone="TEST-ALLOC-NOT-PARENT:CAPS"><primary>TEST_ALLOC_NOT_PARENT</primary></indexterm>
<programlisting>#define             TEST_ALLOC_NOT_PARENT(_ptr, _parent)</programlisting>
<para>
Check that the pointer <parameter>_ptr</parameter> was allocated with <link linkend="nih-alloc"><function>nih_alloc()</function></link> and does not
have the other block <parameter>_parent</parameter> as a parent.  <parameter>_parent</parameter> may be the special
NULL parent.
</para><variablelist role="params">
<varlistentry><term><parameter>_ptr</parameter>&#160;:</term>
<listitem><simpara>allocated pointer,</simpara></listitem></varlistentry>
<varlistentry><term><parameter>_parent</parameter>&#160;:</term>
<listitem><simpara>expected non-parent.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="realloc" role="function">
<title>realloc ()</title>
<indexterm zone="realloc"><primary>realloc</primary></indexterm>
<programlisting><link linkend="return"><returnvalue>return</returnvalue></link>              realloc                             (<parameter><link linkend="ptr"><type>ptr</type></link> Param1</parameter>,
                                                         <parameter><link linkend="size"><type>size</type></link> Param2</parameter>);</programlisting>
</refsect2>
<refsect2 id="TEST-ALLOC-FAIL:CAPS" role="macro">
<title>TEST_ALLOC_FAIL</title>
<indexterm zone="TEST-ALLOC-FAIL:CAPS"><primary>TEST_ALLOC_FAIL</primary></indexterm>
<programlisting>#define             TEST_ALLOC_FAIL</programlisting>
<para>
This macro expands to code that runs the following block repeatedly; the
first time (when the special test_alloc_failed variable is zero) is
used to determine how many allocations are performed by the following block;
subsequent calls (when test_alloc_failed is a positive integer) mean that
the test_alloc_failedth call to realloc has failed.
</para>
<para>
This cannot be nested as it relies on setting an alternate allocator
and sharing a global state.
</para></refsect2>
<refsect2 id="TEST-ALLOC-SAFE:CAPS" role="macro">
<title>TEST_ALLOC_SAFE</title>
<indexterm zone="TEST-ALLOC-SAFE:CAPS"><primary>TEST_ALLOC_SAFE</primary></indexterm>
<programlisting>#define             TEST_ALLOC_SAFE</programlisting>
<para>
This macro may be used within a TEST_ALLOC_FAIL block to guard the
following block of code from failing allocation.
</para></refsect2>
<refsect2 id="test-free-tag" role="struct">
<title>struct test_free_tag</title>
<indexterm zone="test-free-tag"><primary>test_free_tag</primary></indexterm>
<programlisting>struct test_free_tag {
	NihList  entry;
	void    *ptr;
};
</programlisting>
<para>
This structure is used to find out whether an <link linkend="nih-alloc"><function>nih_alloc()</function></link> allocated object
has been freed or not.  It works by being allocated as a child of the
tagged object, and added to a linked list of known tags.  When freed,
it is removed from the linked list.
</para><variablelist role="struct">
<varlistentry><term><link linkend="NihList"><type>NihList</type></link>&#160;<structfield id="test-free-tag.entry">entry</structfield>;</term>
<listitem><simpara>list entry,</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="void"><type>void</type></link>&#160;*<structfield id="test-free-tag.ptr">ptr</structfield>;</term>
<listitem><simpara>tagged object.</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="TEST-FREE-TAG:CAPS" role="macro">
<title>TEST_FREE_TAG()</title>
<indexterm zone="TEST-FREE-TAG:CAPS"><primary>TEST_FREE_TAG</primary></indexterm>
<programlisting>#define             TEST_FREE_TAG(_ptr)</programlisting>
<para>
This macro is used to tag an <link linkend="nih-alloc"><function>nih_alloc()</function></link> allocated object to determine
whether or not it is freed.  It works by allocating a child object of
<parameter>_ptr</parameter> and storing it in a linked list.
</para>
<para>
This can be tested with either the TEST_FREE or TEST_NOT_FREE macros as
many times as you like.
</para><variablelist role="params">
<varlistentry><term><parameter>_ptr</parameter>&#160;:</term>
<listitem><simpara>allocated object.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TEST-FREE:CAPS" role="macro">
<title>TEST_FREE()</title>
<indexterm zone="TEST-FREE:CAPS"><primary>TEST_FREE</primary></indexterm>
<programlisting>#define             TEST_FREE(_ptr)</programlisting>
<para>
Check that the <link linkend="nih-alloc"><function>nih_alloc()</function></link> allocated object <parameter>_ptr</parameter> was freed as expected; it
must have been first prepared by using TEST_FREE_TAG on it otherwise this
will always fail.
</para><variablelist role="params">
<varlistentry><term><parameter>_ptr</parameter>&#160;:</term>
<listitem><simpara>allocated object.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TEST-NOT-FREE:CAPS" role="macro">
<title>TEST_NOT_FREE()</title>
<indexterm zone="TEST-NOT-FREE:CAPS"><primary>TEST_NOT_FREE</primary></indexterm>
<programlisting>#define             TEST_NOT_FREE(_ptr)</programlisting>
<para>
Check that the <link linkend="nih-alloc"><function>nih_alloc()</function></link> allocated object <parameter>_ptr</parameter> was not freed
unexpectedly; it must have been first prepared by using TEST_FREE_TAG
on it otherwise this will always succeed.
</para><variablelist role="params">
<varlistentry><term><parameter>_ptr</parameter>&#160;:</term>
<listitem><simpara>allocated block.</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
